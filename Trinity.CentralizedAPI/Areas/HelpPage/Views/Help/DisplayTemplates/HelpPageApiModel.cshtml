@using System.Web.Http
@using System.Web.Http.Description
@using Trinity.BackendAPI.Areas.HelpPage.Models
@using Trinity.BackendAPI.Areas.HelpPage.ModelDescriptions
@model HelpPageApiModel

@{
    ApiDescription description = Model.ApiDescription;

    List<ParameterDescription> arrayShow = null;
    if (Model.RequestModelDescription != null)
    {
        arrayShow = new List<ParameterDescription>();
        if (Model.RequestBodyParameters!=null)
        {
            arrayShow.AddRange(Model.RequestBodyParameters);
        }
        List<ParameterDescription> removeNotAlowParam = new List<ParameterDescription>();
        var CustomAttribute = Model.ApiDescription.ActionDescriptor.GetCustomAttributes<CustomAttribute>();
        var AlowParameter = CustomAttribute.Where(d => !string.IsNullOrEmpty(d.AlowParameter)).Select(d => d.AlowParameter.Split(',')).SelectMany(d => d).Select(d => d.Trim()).Where(d => !string.IsNullOrEmpty(d)).ToList();
        var IgnoreParameter = CustomAttribute.Where(d => !string.IsNullOrEmpty(d.IgnoreParameter)).Select(d => d.IgnoreParameter.Split(',')).SelectMany(d => d).Select(d => d.Trim()).Where(d => !string.IsNullOrEmpty(d)).ToList();
        if (AlowParameter.Count > 0)
        {
            foreach (var param in arrayShow)
            {
                if (!AlowParameter.Contains(param.Name))
                {
                    removeNotAlowParam.Add(param);
                }
            }
            foreach (var param in removeNotAlowParam)
            {
                arrayShow.Remove(param);
            }
        }
        else if (IgnoreParameter.Count > 0)
        {
            foreach (var param in IgnoreParameter)
            {
                var paramDes = arrayShow.FirstOrDefault(d => d.Name.Equals(param));
                if (paramDes != null)
                {
                    arrayShow.Remove(paramDes);
                }
            }
        }
    }
    //
    Dictionary<System.Net.Http.Headers.MediaTypeHeaderValue, object> SampleRequests = new Dictionary<System.Net.Http.Headers.MediaTypeHeaderValue, object>();
    if (Model.SampleRequests.Count>0 && Model.SampleRequests.ContainsKey(new System.Net.Http.Headers.MediaTypeHeaderValue("application/json")))
    {
        Dictionary<string, string> dataSample = Newtonsoft.Json.JsonConvert.DeserializeObject<Dictionary<string, string>>(Model.SampleRequests[new System.Net.Http.Headers.MediaTypeHeaderValue("application/json")].ToString());
        var key = dataSample.Select(d => d.Key).ToList();
        foreach (var item in key)
        {
            if (!arrayShow.Any(d=>d.Name.Equals(item)))
            {
                dataSample.Remove(item);
            }
        }
        SampleRequests.Add(new System.Net.Http.Headers.MediaTypeHeaderValue("application/json"), Newtonsoft.Json.JsonConvert.SerializeObject(dataSample).Replace("\",\"", "\",\n\""));
    }
}
<h1>@description.HttpMethod.Method @description.RelativePath</h1>
<div>
    <p>@description.Documentation</p>

    <h2>Request Information</h2>

    <h3>URI Parameters</h3>
    @Html.DisplayFor(m => m.UriParameters, "Parameters")

    <h3>Body Parameters</h3>

    <p>@Model.RequestDocumentation</p>

    @if (Model.RequestModelDescription != null)
    {
        @Html.DisplayFor(m => m.RequestModelDescription.ModelType, "ModelDescriptionLink", new { modelDescription = Model.RequestModelDescription })
        if (arrayShow != null && arrayShow.Count>0)
        {
            @Html.DisplayFor(m => arrayShow, "Parameters")
        }
    }
    else
    {
        <p>None.</p>
    }

    @if (SampleRequests.Count > 0)
    {
        <h3>Request Formats</h3>
        @Html.DisplayFor(m => SampleRequests, "Samples")
    }

    <h2>Response Information</h2>

    <h3>Resource Description</h3>

    <p>@description.ResponseDescription.Documentation</p>

    @if (Model.ResourceDescription != null)
    {
        @Html.DisplayFor(m => m.ResourceDescription.ModelType, "ModelDescriptionLink", new { modelDescription = Model.ResourceDescription })
        if (Model.ResourceProperties != null)
        {
            @Html.DisplayFor(m => m.ResourceProperties, "Parameters")
        }
    }
    else
    {
        <p>None.</p>
    }

    @if (Model.SampleResponses.Count > 0)
    {
        <h3>Response Formats</h3>
        @Html.DisplayFor(m => m.SampleResponses, "Samples")
    }

</div>